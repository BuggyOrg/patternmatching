{
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  },
  "nodes": [
    {
      "v": "mrules_0",
      "value": {
        "id": "mrules_0",
        "nodeType": "process",
        "atomic": false,
        "inputPorts": {
          "n": "number"
        },
        "outputPorts": {
          "out": "number"
        },
        "implementation": {
          "nodes": [
            {
              "name": "0_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "1_CONST",
              "meta": "math/const",
              "params": {
                "value": 1
              }
            },
            {
              "name": "2_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "3_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "4_OR",
              "meta": "logic/or"
            },
            {
              "name": "5_NOT",
              "meta": "logic/not"
            },
            {
              "name": "6_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "7_CONST",
              "meta": "math/const",
              "params": {
                "value": 1
              }
            },
            {
              "name": "8_CONSUME",
              "meta": "control/consume"
            },
            {
              "name": "9_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "10_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "11_CONSUME",
              "meta": "control/consume"
            },
            {
              "name": "12_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "13_CONSUME",
              "meta": "control/consume"
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "0_EQUAL:i1"
            },
            {
              "from": "1_CONST:output",
              "to": "0_EQUAL:i2"
            },
            {
              "from": "n",
              "to": "2_EQUAL:i1"
            },
            {
              "from": "3_CONST:output",
              "to": "2_EQUAL:i2"
            },
            {
              "from": "0_EQUAL:eq",
              "to": "4_OR:i1"
            },
            {
              "from": "2_EQUAL:eq",
              "to": "4_OR:i2"
            },
            {
              "from": "4_OR:or",
              "to": "5_NOT:input"
            },
            {
              "from": "7_CONST:output",
              "to": "6_DEMUX:input"
            },
            {
              "from": "0_EQUAL:eq",
              "to": "6_DEMUX:control"
            },
            {
              "from": "6_DEMUX:outTrue",
              "to": "out"
            },
            {
              "from": "6_DEMUX:outFalse",
              "to": "8_CONSUME:all"
            },
            {
              "from": "10_CONST:output",
              "to": "9_DEMUX:input"
            },
            {
              "from": "2_EQUAL:eq",
              "to": "9_DEMUX:control"
            },
            {
              "from": "9_DEMUX:outTrue",
              "to": "out"
            },
            {
              "from": "9_DEMUX:outFalse",
              "to": "11_CONSUME:all"
            },
            {
              "from": "n",
              "to": "12_DEMUX:input"
            },
            {
              "from": "5_NOT:output",
              "to": "12_DEMUX:control"
            },
            {
              "from": "12_DEMUX:outTrue",
              "to": "out"
            },
            {
              "from": "12_DEMUX:outFalse",
              "to": "13_CONSUME:all"
            }
          ]
        }
      }
    }
  ],
  "edges": []
}