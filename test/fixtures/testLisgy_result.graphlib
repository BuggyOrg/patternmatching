{
  "code": "(match [n m] [0 0] [\"FizzBuzz\"] [0 _] [\"Fizz\"] [_ 0] [\"Buzz\"] :else [n])",
  "nodes": [
    {
      "v": "defco_mrules_2",
      "value": {
        "id": "mrules_2",
        "nodeType": "process",
        "atomic": false,
        "inputPorts": {
          "m": "number",
          "n": "generic"
        },
        "outputPorts": {
          "out_0": "generic"
        },
        "implementation": {
          "nodes": [
            {
              "name": "0_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "1_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "2_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "3_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "4_AND",
              "meta": "logic/and"
            },
            {
              "name": "5_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "6_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "7_EQUAL",
              "meta": "logic/equal"
            },
            {
              "name": "8_CONST",
              "meta": "math/const",
              "params": {
                "value": 0
              }
            },
            {
              "name": "9_NOT",
              "meta": "logic/not"
            },
            {
              "name": "10_AND",
              "meta": "logic/and"
            },
            {
              "name": "11_NOT",
              "meta": "logic/not"
            },
            {
              "name": "12_AND",
              "meta": "logic/and"
            },
            {
              "name": "13_OR",
              "meta": "logic/or"
            },
            {
              "name": "14_OR",
              "meta": "logic/or"
            },
            {
              "name": "15_NOT",
              "meta": "logic/not"
            },
            {
              "name": "16_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "17_CONST",
              "meta": "math/const",
              "params": {
                "value": "FizzBuzz"
              }
            },
            {
              "name": "18_CONSUME",
              "meta": "control/consume"
            },
            {
              "name": "19_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "20_CONST",
              "meta": "math/const",
              "params": {
                "value": "Fizz"
              }
            },
            {
              "name": "21_CONSUME",
              "meta": "control/consume"
            },
            {
              "name": "22_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "23_CONST",
              "meta": "math/const",
              "params": {
                "value": "Buzz"
              }
            },
            {
              "name": "24_CONSUME",
              "meta": "control/consume"
            },
            {
              "name": "25_DEMUX",
              "meta": "logic/demux"
            },
            {
              "name": "26_CONSUME",
              "meta": "control/consume"
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "0_EQUAL:i1"
            },
            {
              "from": "1_CONST:output",
              "to": "0_EQUAL:i2"
            },
            {
              "from": "m",
              "to": "2_EQUAL:i1"
            },
            {
              "from": "3_CONST:output",
              "to": "2_EQUAL:i2"
            },
            {
              "from": "0_EQUAL:eq",
              "to": "4_AND:i1"
            },
            {
              "from": "2_EQUAL: eq",
              "to": "4_AND:i2"
            },
            {
              "from": "n",
              "to": "5_EQUAL:i1"
            },
            {
              "from": "6_CONST:output",
              "to": "5_EQUAL:i2"
            },
            {
              "from": "m",
              "to": "7_EQUAL:i1"
            },
            {
              "from": "8_CONST:output",
              "to": "7_EQUAL:i2"
            },
            {
              "from": "4_AND:or",
              "to": "9_NOT:input"
            },
            {
              "from": "9_NOT:output",
              "to": "10_AND:i1"
            },
            {
              "from": "5_EQUAL:eq",
              "to": "10_AND:i2"
            },
            {
              "from": "4_AND:or",
              "to": "11_NOT:input"
            },
            {
              "from": "11_NOT:output",
              "to": "12_AND:i1"
            },
            {
              "from": "7_EQUAL:eq",
              "to": "12_AND:i2"
            },
            {
              "from": "4_AND:and",
              "to": "13_OR:i1"
            },
            {
              "from": "10_AND: and",
              "to": "13_OR:i2"
            },
            {
              "from": "12_AND:and",
              "to": "14_ORi1"
            },
            {
              "from": "13_OR:or",
              "to": "14_OR:i2"
            },
            {
              "from": "14_OR:or",
              "to": "15_NOT:input"
            },
            {
              "from": "17_CONST:output",
              "to": "16_DEMUX:input"
            },
            {
              "from": "4_AND:and",
              "to": "16_DEMUX:control"
            },
            {
              "from": "16_DEMUX:outTrue",
              "to": "out_0"
            },
            {
              "from": "16_DEMUX:outFalse",
              "to": "18_CONSUME:all"
            },
            {
              "from": "20_CONST:output",
              "to": "19_DEMUX:input"
            },
            {
              "from": "10_AND:and",
              "to": "19_DEMUX:control"
            },
            {
              "from": "19_DEMUX:outTrue",
              "to": "out_0"
            },
            {
              "from": "19_DEMUX:outFalse",
              "to": "21_CONSUME:all"
            },
            {
              "from": "23_CONST:output",
              "to": "22_DEMUX:input"
            },
            {
              "from": "12_AND:and",
              "to": "22_DEMUX:control"
            },
            {
              "from": "22_DEMUX:outTrue",
              "to": "out_0"
            },
            {
              "from": "22_DEMUX:outFalse",
              "to": "24_CONSUME:all"
            },
            {
              "from": "n",
              "to": "25_DEMUX:input"
            },
            {
              "from": "15_NOT:output",
              "to": "25_DEMUX:control"
            },
            {
              "from": "25_DEMUX:outTrue",
              "to": "out_0"
            },
            {
              "from": "25_DEMUX:outFalse",
              "to": "26_CONSUME:all"
            }
          ]
        }
      }
    },
    {
      "v": "match_0_name",
      "value": {
        "id": "match_0",
        "inputPorts": {
          "n": "generic",
          "m": "generic"
        },
        "outputPorts": {
          "out_0": "generic"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "mrules_2",
              "name": "match_rules_2"
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "match_rules_2:n"
            },
            {
              "from": "m",
              "to": "match_rules_2:m"
            },
            {
              "from": "match_rules_2:out_0",
              "to": "out_0"
            }
          ]
        },
        "name": "match_0_name"
      }
    }
  ],
  "edges": [],
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  }
}